#!/usr/bin/env bash
a='aws --endpoint-url https://s3.demo.netapp.com:8082 --ca chain.pem'
b=bucket
c=100
d=2
# Switchboard options, set 1 to enable
enableversioning=1
enablefileuploads=1
#
prelistobjects=1
deleteobjects=1
postlistobjects=1
#
prelistversions=1
deleteversions=1
postlistversions=1
#
prelistdeletemarkers=1
deletedeletemarkers=1
postlistdeletemarkers=1
#
removebucket=1
#
# Limit the number of parallel PUT and DELETE calls, set 0 for unlimited
governor=20
#
# Display Counters, set 1 to display
showcounters=1
#
# Pre-requisites checks
command -v jq >/dev/null || { echo "jq is required."; exit 1; }
command -v aws >/dev/null || { echo "awscli is required."; exit 1; }
command -v awk >/dev/null || { echo "awk is required."; exit 1; }
command -v ps >/dev/null || { echo "ps is required."; exit 1; }
[[ $BASH_VERSINFO > 2 ]] || { echo "need bash>3."; exit 1; }
width=$(tput cols)
prepad=$(printf '.%.0s' {1..10})
pad=$(printf '#%.0s' {1..10})
postpad=$(printf '+%.0s' {1..10})
mypid=$$

function title(){
  case $1 in
    PRE) p=$prepad;;
    POST) p=$postpad;;
    *) p=$pad;;
  esac
  echo -e "\033[01;32m$p $@ $p\033[00m"
}

function throttle(){
  [[ $governor == 0 ]] && return
  nproc=$(awk -vRS="$mypid" 'END{print int(NR/2)}'<<<$(ps -eoppid))
  if [[ $nproc -gt $governor ]]; then
    echo -e "\033[1;33mthrottling ($governor)...\033[00m"
    wait 
  fi
}

# Check for the bucket
title "Check for bucket \"$b\""
bhead=$($a s3api head-bucket --bucket $b 2>&1|sed -n 's/[^0-9]*\([0-9]\{3\}\).*/\1/p')
case $bhead in
  404)
    echo "Bucket named \"$b\" is available"
    newbuck=yes
    ;;
  403)
    echo "Bucket named \"$b\" is unavailable or verify your credentials."
    exit 1
    ;;
  *)
    bucket=yes
    ;;
esac

# Create the bucket
if [[ ! -z $newbuck ]];then
  title "Creating bucket \"$b\""
  $a s3 mb s3://$b
  if [[ $? == 0 ]]; then bucket=yes;fi
fi

if [[ ! -z $bucket ]];then
  # Check bucket versioning
  if [[ $enableversioning == 1 ]];then
    title "Check versioning on bucket \"$b\""
    v=$($a s3api get-bucket-versioning --bucket $b)
    [[ $? == 0 ]] || { echo "Cannot proceed, exiting"; exit 1;}
    v=$(jq -r '.Status'<<<$v)
    if [[ $v == "Enabled" ]]; then versiond=yes; echo $v;fi

    # Enable versioning on bucket
    if [[ -z $versiond && $enableversioning == 1 ]];then
      title "Enabling versioning on bucket \"$b\""
      $a s3api put-bucket-versioning --bucket $b --versioning-configuration Status=Enabled
    fi
  fi

  # PUT C files with D versions each
  if [[ $enablefileuploads == 1 ]];then
    if [[ $enableversioning == 0 ]];then d=1;fi
    title "Creating $c files and $d version(s)"
    for ((i=1;i<=$c;i++));do
      for ((j=1;j<=$d;j++));do
        date > test$i
        [[ $showcounters == 1 ]] && dcnt="file $i/$c version $j/$d"
        $a s3api put-object --bucket $b --key vers/test$i --body test$i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"' &
        throttle
      done
    done
    wait
  fi

  # Remove the test files
  if [[ $enablefileuploads == 1 ]];then
    title "Cleaning up local files"
    for ((i=1;i<=$c;i++));do
      rm test$i
    done
  fi

  if [[ $prelistobjects == 1 ]];then
    title PRE "List of objects"
    $a s3api list-objects --bucket $b|jq -r '.Contents[].Key'
  fi

  # Delete all Objects
  if [[ $deleteobjects == 1 ]];then
    listobjects=$($a s3api list-objects --bucket $b)
    objects=$(jq -r '.Contents[].Key'<<<$listobjects)
    tot=$(jq -r '.Contents|length'<<<$listobjects)
    cnt=1
    title "Deleting all $tot files in bucket \"$b\""
    for i in $objects;do
      [[ $showcounters == 1 ]] && dcnt="Object $((cnt++))/$tot"
      #[[ $enableversioning == 0 ]] && echo
      $a s3api delete-object --bucket $b --key $i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"' &
      throttle
    done
    wait
  fi

  if [[ $postlistobjects == 1 ]];then
    title POST "List of objects"
    $a s3api list-objects --bucket $b
  fi

  if [[ $prelistversions == 1 ]];then
    title PRE "List of file versions"
    listversions=$($a s3api list-object-versions --bucket $b)
    versions=$(jq -r '.Versions[]?'<<<$listversions)
    tot=$(jq -r '.Versions|length'<<<$listversions)
    jq -r '.|"\(.Key) version-id \(.VersionId)"'<<< $versions
  fi

  # Delete all files' versions
  if [[ $deleteversions == 1 ]];then
    if [[ $prelistversions == 0 ]];then
      listversions=$($a s3api list-object-versions --bucket $b)
      versions=$(jq -r '.Versions[]?'<<<$listversions)
      tot=$(jq -r '.Versions|length'<<<$listversions)
    fi
    if [[ $versions ]];then
      title "Deleting all $tot file versions in bucket \"$b\""
      cnt=1
      while read i;do
        [[ $showcounters == 1 ]] && dcnt="Version $((cnt++))/$tot"
        $a s3api delete-object --bucket $b $i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"' &
        throttle
      done< <($a s3api list-object-versions --bucket $b|jq -r '.Versions[]?|"--key \(.Key) --version-id \(.VersionId)"')
      wait
    fi
  fi

  if [[ $postlistversions == 1 ]];then
    title POST "List of file versions"
    versions=$($a s3api list-object-versions --bucket $b)
    jq -r '.Versions'<<< $versions
  fi

  if [[ $prelistdeletemarkers == 1 ]];then
    title PRE "List of delete markers"
    listdmarkers=$($a s3api list-object-versions --bucket $b)
    dmarkers=$(jq -r '.DeleteMarkers[]?'<<<$listdmarkers)
    tot=$(jq -r '.DeleteMarkers|length'<<<$listdmarkers)
    jq -r '.|"\(.Key) version-id \(.VersionId)"'<<< $dmarkers
  fi

  # Delete all DeleteMarkers
  if [[ $deletedeletemarkers == 1 ]];then
    if [[ $prelistdeletemarkers == 0 ]];then
      listdmarkers=$($a s3api list-object-versions --bucket $b)
      dmarkers=$(jq -r '.DeleteMarkers[]?'<<<$listdmarkers)
      tot=$(jq -r '.DeleteMarkers|length'<<<$listdmarkers)
    fi
    if [[ $dmarkers ]];then
      title "Deleting all $tot delete markers in bucket \"$b\""
      cnt=1
      while read i;do
        [[ $showcounters == 1 ]] && dcnt="Delete Marker $((cnt++))/$tot"
        $a s3api delete-object --bucket $b $i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"' &
        throttle
      done< <($a s3api list-object-versions --bucket $b|jq -r '.DeleteMarkers[]?|"--key \(.Key) --version-id \(.VersionId)"')
      wait
    fi
  fi

  if [[ $postlistdeletemarkers == 1 ]];then
    title POST "List of delete markers"
    dmarkers=$($a s3api list-object-versions --bucket $b)
    jq -r '.DeleteMarkers'<<< $dmarkers
  fi

  # Remove bucket
  if [[ $removebucket == 1 ]];then
    title "Removing bucket \"$b\""
    $a s3 rb s3://$b
  fi
fi
