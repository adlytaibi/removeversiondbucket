#!/usr/bin/env bash
# Pre-requisites checks
command -v jq >/dev/null || { echo "jq is required."; exit 1; }
command -v aws >/dev/null || { echo "awscli is required."; exit 1; }
command -v awk >/dev/null || { echo "awk is required."; exit 1; }
command -v sed >/dev/null || { echo "sed is required."; exit 1; }
command -v ps >/dev/null || { echo "ps is required."; exit 1; }
command -v bc >/dev/null || { echo "bc is required."; exit 1; }
[[ $BASH_VERSINFO > 2 ]] || { echo "need bash>3."; exit 1; }

# Full help page
function usage() {
  echo -e "\033[1mUSAGE\033[0m\n\tCustom workflows for S3 bucket with versioning\n\n\033[1mSYNOPSIS\033[0m"
  shortusage
  echo -e "\n\033[1mDESCRIPTION\033[0m"
  echo -e "\t\033[1m-a=\033[0m"OPTIONS", \033[1m--awscliopts=\033[0m\"OPTIONS\"\t(\033[1mdefault:\033[0m \"--endpoint-url https://s3.demo.netapp.com:8082 --ca chain.pem\")"
  echo -e "\t\tRefer to aws help pages. Do not add aws at the beginning of the options, it's already taken care of."
  echo -e "\n\t\033[1m-b=\033[0mNAME, \033[1m--bucket=\033[0mNAME\t(\033[1mdefault:\033[0m Randomly Generated with \033[1mrbv\033[0m prefix)"
  echo -e "\t\tProvide a bucket name for existing or to be created."
  echo -e "\n\t\033[1m-c=\033[0mVALUE, \033[1m--numfiles=\033[0mVALUE\t(\033[1mdefault:\033[0m 100)"
  echo -e "\t\tNumber of test files that will be generated and PUT into bucket."
  echo -e "\n\t\033[1m-d=\033[0mVALUE, \033[1m--numvers=\033[0mVALUE\t(\033[1mdefault:\033[0m 2) "
  echo -e "\t\tNumber of versions per file."
  echo -e "\n\t\033[1m-v\033[0m, \033[1m--suspendversioning\033[0m, \033[1m+v\033[0m, \033[1m--enableversioning\033[0m\t\033[1m\033[0m\t(\033[1mdefault:\033[0m Enabled)"
  echo -e "\t\tEnable or suspend versioning on the bucket. These are mutually exclusive options."
  echo -e "\n\t\033[1m-f\033[0m, \033[1m--disablefileuploads\033[0m, \033[1m+f\033[0m, \033[1m--enablefileuploads\033[0m\t(\033[1mdefault:\033[0m Enabled)"
  echo -e "\t\tCreate and update (PUT) files. These are mutually exclusive options."
  echo -e "\t\tThese are mutually exclusive options."
  echo -e "\n\t\033[1m-rb\033[0m, \033[1m--removebucket\033[0m, \033[1m-kb\033[0m, \033[1m--keepbucket\033[0m\t(\033[1mdefault:\033[0m Delete bucket)"
  echo -e "\t\tKeep or delete the bucket. This delete command will fail if the bucket is not empty.\n\t\tThese are mutually exclusive options."
  echo -e "\n\t\033[1m-g\033[0m=VALUE, \033[1m--governor\033[0m=VALUE\t(\033[1mdefault:\033[0m 20)"
  echo -e "\t\tThrottle the number of parallel PUT or DELETE operations. Set to 0 for unlimited.\n\t\tSet this a value you're comfortable with depending how powerful your machine is."
  echo -e "\n\t\033[1m-s\033[0m, \033[1m--hidecounters\033[0m\t(\033[1mdefault:\033[0m Disabled)"
  echo -e "\t\tSet this switch to hide counters from being printed. Counters are shown by default."
  echo -e "\n\t\033[1m-r\033[0m, \033[1m--showonly\033[0m"
  echo -e "\t\tThis option will only show the parameters and not execute the program.\n\t\tThis is a great way to check the parameters before launching what could be sometimes a long running operations."
  echo -e "\t\tThis option is mutually exclusive with \033[1m--showrun\033[0m."
  echo -e "\n\t\033[1m-sr\033[0m, \033[1m--showrun\033[0m"
  echo -e "\t\tThis option will show the parameters and execute the program."
  echo -e "\t\tThis option is mutually exclusive with \033[1m--showonly\033[0m."
  echo -e "\n\t\033[1m-et\033[0m, \033[1m--elapsedtime\033[0m"
  echo -e "\t\tThis option will show the elapsed time for operations in format of HH:MM:SS (don't do days)."
  echo -e "\n\t\033[1m-sb\033[0m=VALUE, \033[1m--switchboard\033[0m=VALUE\t(\033[1mdefault:\033[0m 777)"
  echo -e "\t\tIn order to reduce the number of options to set for the following 9 parameters. We'll be using the octal numbers similar to *nix style file permissions."
  echo -e "\t\tThere are three set of phases the program goes through \033[1mObject\033[0m, \033[1mFile versions\033[0m and \033[1mDelete markers\033[0m."
  echo -e "\t\tEach phase has three sets of parameters \033[1mpre-delete list\033[0m, \033[1mdelete operation\033[0m and \033[1mpost-delete list\033[0m."
  echo -e "\t\tThe pre and post listing steps are only for printing and pretty much noise. The delete operation is what's important."
  echo -e "\n\t\tThe 3 phases have been assigned a digit location in the \033[1mswitchboard\033[0m option."
  echo -e "\t\tThe \033[1mleft\033[0m digit has been assigned to the \033[1mObject\033[0m phase."
  echo -e "\t\tThe \033[1mmiddle\033[0m digit has been assigned to the \033[1mFile versions\033[0m phase."
  echo -e "\t\tThe \033[1mright\033[0m digit has been assigned to the \033[1mDelete markers\033[0m phase."
  echo -e "\n\t\tEach phase's digit value is the addition of the following options' values."
  echo -e "\t\tThe \033[1mpre-delete list\033[0m options have been assigned a value of \033[1m4\033[0m to enable and a \033[1m0\033[0m to disable."
  echo -e "\t\tThe \033[1mdelete operation\033[0m options have been assigned a value of \033[1m2\033[0m to enable and a \033[1m0\033[0m to disable."
  echo -e "\t\tThe \033[1mpost-delete list\033[0m options have been assigned a value of \033[1m1\033[0m to enable and a \033[1m0\033[0m to disable."
  echo -e "\n\t\t\033[4mFor example:\033[0m"
  echo -e "\t\t\t1- Enabling all options for all phases would the addition of 4,2,1 which adds up to 7,7,7 put together would form a \033[1mswitchboard\033[0m option of \033[1m777\033[0m."
  echo -e "\n\t\t\t2- Enabling only pre-delete listing for all phases is a 4 for each phase and put together forms a \033[1mswitchboard\033[0m option of \033[1m444\033[0m."
  echo -e "\n\t\t\t3- Performing the delete operations and post-delete list for \033[1mFile versions\033[0m and \033[1mDelete markers\033[0m phases only,\n\t\t\t  the \033[1mObject\033[0m phase would score a \033[1m0\033[0m and the other two phases would score a \033[1m3\033[0m each, so the \033[1mswitchboard\033[0m option value would be \033[1m033\033[0m."
  echo -e "\n\t\033[1m-l\033[0m, \033[1m--log\033[0m\t(\033[1mdefault:\033[0m Disabled)"
  echo -e "\t\tEnable logging to a file(s) with a format of BucketName_YearMonthDayHourMinute."
  echo -e "\n\t\033[1m--log\033[0m, \033[1m-ld=\033[0m=VALUE, \033[1m--logdir=\033[0m=VALUE\t(\033[1mdefault:\033[0m Randomly generated)"
  echo -e "\t\tOptional parameter. When logging is enabled, the log directory is created under your temporary directory."
  echo -e "\t\tUnless otherwise specified here. A path can be relative to your location or full path."
  echo -e "\n\033[1mEXAMPLES\033[0m"
  echo -e "\tThe following command will show the parameters then executes:"
  echo -e "\n\t\$ $(basename $0) \033[1m-sr\033[0m \033[1m-a=\033[0m\"--endpoint-url https://s3.demo.netapp.com:8082 --ca chain.pem\" \033[1m-b=\033[0mmybucket \033[1m-c=\033[0m5000 \033[1m-d=\033[0m5 \033[1m-kb \033[1m-g=\033[0m30 \033[1m-sb=\033[0m222 \033[1m-rb\033[0m"
  echo -e "\n\taws cli extra options (-a): \033[1maws --endpoint-url https://s3.demo.netapp.com:8082 --ca chain.pem\033[0m"
  echo -e "\tBucket name (-b): \033[1mmybucket\033[0m"
  echo -e "\tNumber of files to create (-c): \033[1m5000\033[0m"
  echo -e "\tNumber of versions per file to create (-d): \033[1m5\033[0m"
  echo -e "\tEnable versioning (-v,+v): \e[1;32mEnabled\e[0m"
  echo -e "\tEnable file uploads (-f,+f): \e[1;32mEnabled\e[0m"
  echo -e "\tDelete bucket (-rb,-kb): \e[1;32mEnabled\e[0m"
  echo -e "\tThrottle parallel (-g): \033[1m30\033[0m"
  echo -e "\tShow counters (-s): \e[1;32mEnabled\e[0m"
  echo -e "\tShow elapsed time (-et): \e[1;31mDisabled\e[0m"
  echo -e "\tExecute after show (-sr): \e[1;32mEnabled\e[0m"
  echo -e "\tSwitchboard setting (-sb): \033[1m222\033[0m"
  echo -e "\t====================== Object phase ======================"
  echo -e "\tPre-Delete object list, objects: \e[1;31mDisabled\e[0m"
  echo -e "\t   DELETE all objects: \e[1;32mEnabled\e[0m"
  echo -e "\tPost Delete object, list objects: \e[1;31mDisabled\e[0m"
  echo -e "\t================== File versions phase =================="
  echo -e "\tPre-Delete file versions, list versions: \e[1;31mDisabled\e[0m"
  echo -e "\t   DELETE all files' versions: \e[1;32mEnabled\e[0m"
  echo -e "\tPost Delete file versions, list versions:: \e[1;31mDisabled\e[0m"
  echo -e "\t================== Delete markers phase =================="
  echo -e "\tPre-Delete delete markers, list delete markers: \e[1;31mDisabled\e[0m"
  echo -e "\t   DELETE all delete markers: \e[1;32mEnabled\e[0m"
  echo -e "\tPost Delete delete markers, list delete markers: \e[1;31mDisabled\e[0m"
  echo -e "\t...<Truncated execution output>..."
  echo -e "\n\033[1mAUTHOR\033[0m"
  echo -e "\tWritten by Adly Taibi."
  echo -e "\n\033[1mCOPYRIGHT\033[0m"
  echo -e "\tLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
  echo -e "\tThis is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law."
  exit 1
}

# Mini help message
function shortusage() {
  echo -e "\t\033[1m$(basename $0)\033[0m [\033[1m-h\033[0m|\033[1m--help\033[0m]\n\t[[\033[1m-a\033[0m|\033[1m--awscliopts\033[0m]="OPTIONS"] [[\033[1m-b\033[0m|\033[1m--bucket\033[0m]=NAME] [[\033[1m-c\033[0m|\033[1m--numfiles\033[0m]=VALUE] [[\033[1m-d\033[0m|\033[1m--numvers\033[0m]=VALUE]\n\t[[\033[1m-v\033[0m|\033[1m--suspendversioning\033[0m] | [\033[1m+v\033[0m|\033[1m--enableversioning\033[0m]]\n\t[[\033[1m-f\033[0m|\033[1m--disablefileuploads\033[0m] | [\033[1m+f\033[0m|\033[1m--enablefileuploads\033[0m]]\n\t[[\033[1m-rb\033[0m|\033[1m--removebucket\033[0m] | [\033[1m-kb\033[0m|\033[1m--keepbucket\033[0m]]\n\t[[\033[1m-g\033[0m|\033[1m--governor\033[0m]=VALUE] [\033[1m-s\033[0m|\033[1m--hidecounters\033[0m]\n\t[\033[1m-r\033[0m|\033[1m--showonly\033[0m] [\033[1m-sr\033[0m|\033[1m--showrun\033[0m] [\033[1m-et\033[0m|\033[1m--elapsedtime\033[0m]\n\t[[\033[1m-sb\033[0m|\033[1m--switchboard\033[0m]=VALUE]\n\t[[\033[1m-l\033[0m|\033[1m--log\033[0m] [[\033[1m-ld\033[0m|\033[1m--logdir\033[0m]=VALUE]]\n"
}

# Random name generation
l="$(sed 's/ //g' <<< $(echo {a..z} {0..9}))"
bucket=rvb
for ((i;i<9;i++))
do
  r=$(( $RANDOM % ${#l} ))
  bucket+=${l:$r:1}
done

# Initial settings
enableversioning=2
suspendversioning=2
enablefileuploads=2
disablefileuploads=2
removebucket=2
keepbucket=2
showonly=2
showrun=2

# Read arguments if any
while [[ ! -z $1 ]]
do
  case $1 in
    -a=*|--awscliopts=*) a=${1#*=} ;;
    -b=*|--bucket=*) b=${1#*=} ;;
    -c=*|--numfiles=*) c=${1#*=} ;;
    -d=*|--numvers=*) d=${1#*=} ;;
    -v|--suspendversioning) suspendversioning=1 ;;
    +v|--enableversioning) enableversioning=1 ;;
    -f|--disablefileuploads) disablefileuploads=1 ;;
    +f|--enablefileuploads) enablefileuploads=1 ;;
    -kb|--keepbucket) keepbucket=1 ;;
    -rb|--removebucket) removebucket=1 ;;
    -g=*|--governor=*) governor=${1#*=} ;;
    -s|--hidecounters) showcounters=0 ;;
    -r|--showonly) showonly=1 ;;
    -sr|--showrun) showrun=1 ;;
    -et|--elapsedtime) elapsedtime=1 ;;
    -sb=*|--switchboard=*) octalmap=${1#*=} ;;
    -l|--log) log=1 ;;
    -ld=*|--logdir=*) logdir=${1#*=} ;;
    -h|--help) usage ;;
    *) echo "\"${1%=*}\" is an invalid options"; shortusage; exit 1 ;;
  esac
  shift
done

# Default settings
[[ -z $a ]] && a='--endpoint-url https://s3.demo.netapp.com:8082 --ca chain.pem'
[[ -z $b ]] && b=$bucket
[[ -z $c ]] && c=100
[[ -z $d ]] && d=2
[[ $enableversioning == 2 && $suspendversioning == 2 ]] && { enableversioning=1; suspendversioning=0; }
[[ $enablefileuploads == 2 && $disablefileuploads == 2 ]] && { enablefileuploads=1; disablefileuploads=0; }
[[ $removebucket == 2 && $keepbucket == 2 ]] && { removebucket=1; keepbucket=0; }
[[ $showonly == 2 && $showrun == 2 ]] && { showonly=0; showrun=0; }
[[ -z $governor ]] && governor=20
[[ -z $showcounters ]] && showcounters=1
[[ -z $octalmap ]] && octalmap=777
[[ -z $elapsedtime ]] && elapsedtime=0
[[ -z $log ]] && log=0
[[ $log == 0 && ! -z $logdir ]] && { echo "Need to enable \"log\" before using \"logdir\"."; shortusage; exit 1; }
if [[ $log == 1 ]];then
  if [[ -z $logdir ]];then
    if [[ $showonly == 1 ]];then
      logdir="assigned on run"
    else
      logdir=$(mktemp -d -t rvb-XXXXXXXX)
    fi
  else
    [[ ! -d $logdir ]] && { $(mkdir $logdir) || { echo "Unable to create directory \"$logdir\", exiting."; exit 1; } }
    [[ -w $logdir ]] || { echo "Directory \"$logdir\" is not writable, exiting."; exit 1; }
  fi
fi
l=$(printf '%09d' $(bc <<< "ibase=8;obase=2;$octalmap"))
prelistobjects=${l:0:1}
deleteobjects=${l:1:1}
postlistobjects=${l:2:1}
prelistversions=${l:3:1}
deleteversions=${l:4:1}
postlistversions=${l:5:1}
prelistdeletemarkers=${l:6:1}
deletedeletemarkers=${l:7:1}
postlistdeletemarkers=${l:8:1}

# Print and/or log
ts=$(date +%Y%m%d%H%M)
function printlog(){
  echo -e "$@"
  [[ $log == 1 && $showonly == 0 ]] && sed 's/\\[03e]*\[[0-9;]*m//g'<<<"$@">>$logdir/${b}_$ts
}

function truefalse(){
  if [[ $1 == 1 ]];then
    echo "\e[1;32mEnabled\e[0m"
  else
    echo "\e[1;31mDisabled\e[0m"
  fi
}

function mutex(){
  [[ $1 == 1 && $2 == 1 ]] && { printlog "\"$3\" and \"$4\" are mutually exclusive options."; shortusage; exit 1; }
}

# Parameters display
mutex $showonly $showrun "showonly" "showrun"
mutex $suspendversioning $enableversioning "suspendversioning" "enableversioning"
mutex	$disablefileuploads $enablefileuploads "disablefileuploads" "enablefileuploads"
mutex $removebucket $keepbucket "removebucket" "keepbucket"
if [[ $showonly == 1 || $showrun == 1 ]]; then
  printlog "aws cli extra options (-a): \033[1maws $a\033[0m"
  printlog "Bucket name (-b): \033[1m$b\033[0m"
  printlog "Number of files to create (-c): \033[1m$c\033[0m"
  printlog "Number of versions per file to create (-d): \033[1m$d\033[0m"
  printlog "Enable versioning (-v,+v): $(truefalse $enableversioning)"
  printlog "Enable file uploads (-f,+f): $(truefalse $enablefileuploads)"
  printlog "Delete bucket (-rb,-kb): $(truefalse $removebucket)"
  printlog "Throttle parallel (-g): \033[1m$governor\033[0m"
  printlog "Show counters (-s): $(truefalse $showcounters)"
  printlog "Show elapsed time (-et): $(truefalse $elapsedtime)"
  printlog "Execute after show (-sr): $(truefalse $showrun)"
  printlog "Log output (-l): $(truefalse $log)"
  [[ $log == 1 ]] && printlog "Log output directory (-ld): \033[1m$logdir\033[0m"
  printlog "Switchboard setting (-sb): \033[1m$octalmap\033[0m"
  printlog "$(printf '=%.0s' {1..22}) Object phase $(printf '=%.0s' {1..22})"
  printlog "Pre-Delete object list, objects: $(truefalse $prelistobjects)"
  printlog "   DELETE all objects: $(truefalse $deleteobjects)"
  printlog "Post Delete object, list objects: $(truefalse $postlistobjects)"
  printlog "$(printf '=%.0s' {1..18}) File versions phase $(printf '=%.0s' {1..18})"
  printlog "Pre-Delete file versions, list versions: $(truefalse $prelistversions)"
  printlog "   DELETE all files' versions: $(truefalse $deleteversions)"
  printlog "Post Delete file versions, list versions:: $(truefalse $postlistversions)"
  printlog "$(printf '=%.0s' {1..18}) Delete markers phase $(printf '=%.0s' {1..18})"
  printlog "Pre-Delete delete markers, list delete markers: $(truefalse $prelistdeletemarkers)"
  printlog "   DELETE all delete markers: $(truefalse $deletedeletemarkers)"
  printlog "Post Delete delete markers, list delete markers: $(truefalse $postlistdeletemarkers)"
  [[ $showrun == 1 ]] || exit 0
fi

# Various vars
a="aws $a"
width=$(tput cols)
prepad=$(printf '.%.0s' {1..10})
pad=$(printf '#%.0s' {1..10})
postpad=$(printf '+%.0s' {1..10})
mypid=$$

# Pretty titles function
function title(){
  case $1 in
    PRE) p=$prepad;;
    POST) p=$postpad;;
    *) p=$pad;;
  esac
  printlog "\033[01;32m$p $@ $p\033[0m"
}

# Throttle function
function throttle(){
  [[ $governor == 0 ]] && return
  if [[ $OSTYPE == "linux-gnu" || $OSTYPE == "darwin"* ]];then d=2; else d=1;fi
  nproc=$(awk '$1==p {c++} END{print int(c/d)}' p=$mypid d=$d< <(ps -eoppid))
  if [[ $nproc -gt $governor ]]; then
    printlog "\033[1;33mthrottling ($governor)...\033[0m"
    wait 
  fi
}

# Elapsed time
function etime(){
  dt=$(($2-$1))
  hours=$(printf "%02d" $(($dt/3600)))
  minutes=$(printf "%02d" $(($dt%3600/60)))
  secs=$(printf "%02d" $(($dt%60)))
  printlog "Elapsed time: \033[1;33m${hours}:${minutes}:${secs}\033[0m"
}

# Check for the bucket
title "Check for bucket \"$b\""
bhead=$($a s3api head-bucket --bucket $b 2>&1)
rcode=$?
scode=$(sed -n 's/[^0-9]*\([0-9]\{3\}\).*/\1/p'<<<$bhead)
[[ -z $scode ]] && { printlog "Bucket \"$b\" already exists."; bucket=yes; }
case $scode in
  404)
    printlog "Bucket named \"$b\" is available"
    newbuck=yes
    ;;
  403)
    printlog "Bucket named \"$b\" is unavailable or verify your credentials."
    exit 1
    ;;
  *)
    [[ $rcode == 0 ]] || { printlog "Maybe a problem with endpoint URL."; exit 1;}
    ;;
esac

# Create the bucket
if [[ ! -z $newbuck ]];then
  title "Creating bucket \"$b\""
  printlog "$($a s3 mb s3://$b)"
  if [[ $? == 0 ]]; then bucket=yes;fi
fi

if [[ ! -z $bucket ]];then
  # Check bucket versioning
  title "Check versioning on bucket \"$b\""
  v=$($a s3api get-bucket-versioning --bucket $b)
  [[ $? == 0 ]] || { printlog "Cannot proceed, exiting"; exit 1;}
  versiond=$(jq -r '.Status'<<<$v)
  if [[ -z $versiond ]];then
    printlog "Not version-enabled."
  else
    printlog $versiond
  fi
  # Enable versioning on bucket
  if [[ $enableversioning == 1 ]];then
    if [[ $versiond == "Suspended" || -z $versiond ]];then
      title "Enabling versioning on bucket \"$b\""
      t1=$(date +%s)
      $a s3api put-bucket-versioning --bucket $b --versioning-configuration Status=Enabled
      [[ $elapsedtime == 1 ]] && etime $t1 $(date +%s)
    fi
  fi
  # Suspend versioning on bucket
  if [[ $enableversioning == 0 ]];then
    if [[ $versiond == "Enabled" ]];then
      title "Suspending versioning on bucket \"$b\""
      t1=$(date +%s)
      $a s3api put-bucket-versioning --bucket $b --versioning-configuration Status=Suspended
      [[ $elapsedtime == 1 ]] && etime $t1 $(date +%s)
    fi
  fi

  # PUT C files with D versions each
  if [[ $enablefileuploads == 1 ]];then
    if [[ $enableversioning == 0 ]];then d=1;fi
    title "Creating $c files and $d version(s)"
    tdir=$(mktemp -d)
    [[ $? == 0 ]] || { printlog "Unable to create a temporary directory, exiting"; exit 1;}
    t1=$(date +%s)
    for ((i=1;i<=$c;i++));do
      for ((j=1;j<=$d;j++));do
        date > $tdir/test$i
        [[ $showcounters == 1 ]] && dcnt="file $i/$c version $j/$d"
        printlog "$($a s3api put-object --bucket $b --key vers/test$i --body $tdir/test$i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"')" &
        throttle
      done
    done
    wait
    [[ $elapsedtime == 1 ]] && etime $t1 $(date +%s)
    # Remove the test files
    title "Cleaning up local files"
    rm -r $tdir
    [[ $? == 0 ]] || { printlog "Unable to clean up the temporary directory."; }
  fi

  if [[ $prelistobjects == 1 ]];then
    title PRE "List of objects"
    printlog "$($a s3api list-objects --bucket $b|jq -r '.Contents[].Key')"
  fi

  # Delete all Objects
  if [[ $deleteobjects == 1 ]];then
    listobjects=$($a s3api list-objects --bucket $b)
    objects=$(jq -r '.Contents[].Key'<<<$listobjects)
    tot=$(jq -r '.Contents|length'<<<$listobjects)
    cnt=1
    title "Deleting all $tot files in bucket \"$b\""
    t1=$(date +%s)
    for i in $objects;do
      [[ $showcounters == 1 ]] && dcnt="Object $((cnt++))/$tot"
      printlog "$($a s3api delete-object --bucket $b --key $i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"')" &
      throttle
    done
    wait
    [[ $elapsedtime == 1 ]] && etime $t1 $(date +%s)
  fi

  if [[ $postlistobjects == 1 ]];then
    title POST "List of objects"
    printlog "$($a s3api list-objects --bucket $b)"
  fi

  if [[ $prelistversions == 1 ]];then
    title PRE "List of file versions"
    listversions=$($a s3api list-object-versions --bucket $b)
    versions=$(jq -r '.Versions[]?'<<<$listversions)
    tot=$(jq -r '.Versions|length'<<<$listversions)
    printlog "$(jq -r '.|"\(.Key) version-id \(.VersionId)"'<<< $versions)"
  fi

  # Delete all files' versions
  if [[ $deleteversions == 1 ]];then
    if [[ $prelistversions == 0 ]];then
      listversions=$($a s3api list-object-versions --bucket $b)
      versions=$(jq -r '.Versions[]?'<<<$listversions)
      tot=$(jq -r '.Versions|length'<<<$listversions)
    fi
    if [[ $versions ]];then
      title "Deleting all $tot file versions in bucket \"$b\""
      cnt=1
      t1=$(date +%s)
      while read i;do
        [[ $showcounters == 1 ]] && dcnt="Version $((cnt++))/$tot"
        printlog "$($a s3api delete-object --bucket $b $i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"')" &
        throttle
      done< <($a s3api list-object-versions --bucket $b|jq -r '.Versions[]?|"--key \(.Key) --version-id \(.VersionId)"')
      wait
      [[ $elapsedtime == 1 ]] && etime $t1 $(date +%s)
    fi
  fi

  if [[ $postlistversions == 1 ]];then
    title POST "List of file versions"
    versions=$($a s3api list-object-versions --bucket $b)
    printlog "$(jq -r '.Versions'<<< $versions)"
  fi

  if [[ $prelistdeletemarkers == 1 ]];then
    title PRE "List of delete markers"
    listdmarkers=$($a s3api list-object-versions --bucket $b)
    dmarkers=$(jq -r '.DeleteMarkers[]?'<<<$listdmarkers)
    tot=$(jq -r '.DeleteMarkers|length'<<<$listdmarkers)
    printlog "$(jq -r '.|"\(.Key) version-id \(.VersionId)"'<<< $dmarkers)"
  fi

  # Delete all DeleteMarkers
  if [[ $deletedeletemarkers == 1 ]];then
    if [[ $prelistdeletemarkers == 0 ]];then
      listdmarkers=$($a s3api list-object-versions --bucket $b)
      dmarkers=$(jq -r '.DeleteMarkers[]?'<<<$listdmarkers)
      tot=$(jq -r '.DeleteMarkers|length'<<<$listdmarkers)
    fi
    if [[ $dmarkers ]];then
      title "Deleting all $tot delete markers in bucket \"$b\""
      cnt=1
      t1=$(date +%s)
      while read i;do
        [[ $showcounters == 1 ]] && dcnt="Delete Marker $((cnt++))/$tot"
        printlog "$($a s3api delete-object --bucket $b $i|jq -r --arg dcnt "$dcnt" '.|"\(.VersionId) \($dcnt)"')" &
        throttle
      done< <($a s3api list-object-versions --bucket $b|jq -r '.DeleteMarkers[]?|"--key \(.Key) --version-id \(.VersionId)"')
      wait
      [[ $elapsedtime == 1 ]] && etime $t1 $(date +%s)
    fi
  fi

  if [[ $postlistdeletemarkers == 1 ]];then
    title POST "List of delete markers"
    dmarkers=$($a s3api list-object-versions --bucket $b)
    printlog "$(jq -r '.DeleteMarkers'<<< $dmarkers)"
  fi

  # Remove bucket
  if [[ $removebucket == 1 ]];then
    title "Removing bucket \"$b\""
    t1=$(date +%s)
    printlog "$($a s3 rb s3://$b)"
    [[ $elapsedtime == 1 ]] && etime $t1 $(date +%s)
  fi
fi
